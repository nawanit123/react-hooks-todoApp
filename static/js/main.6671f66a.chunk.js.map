{"version":3,"sources":["Hooks/useInputState.js","reducers/index.js","contexts/todos.context.js","Hooks/useLocalStorageReducer.js","EditTodoForm.js","Todo.js","Hooks/useToggle.js","TodoList.js","TodoForm.js","TodoApp.js","App.js","serviceWorker.js","index.js"],"names":["useInputState","initialVal","useState","state","setState","e","target","value","action","type","id","uuidv4","task","complete","filter","todo","map","defaultTodos","TodosContext","createContext","DispatchContext","TodosProvider","props","key","defaultVal","reducer","useReducer","val","JSON","parse","window","localStorage","getItem","String","dispatch","useEffect","setItem","stringify","useLocalStorageReducer","todoReducer","todos","Provider","children","EditTodoForm","toggleEditForm","handleChange","reset","useContext","onSubmit","preventDefault","style","marginLeft","width","TextField","onChange","margin","fullWidth","autoFocus","memo","toggle","useToggleState","isEditing","console","log","ListItem","height","Checkbox","tabIndex","checked","onClick","ListItemText","textDecoration","ListItemSecondaryAction","IconButton","aria-label","TodoList","length","Paper","List","i","Fragment","Divider","TodoForm","padding","label","TodoApp","backgroundColor","elevation","AppBar","color","position","Toolbar","Typography","Grid","container","justify","marginTop","item","xs","md","lg","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6671f66a.chunk.js","sourcesContent":["import { useState } from 'react';\r\n\r\nfunction useInputState(initialVal) {\r\n  const [state, setState] = useState(initialVal);\r\n  const handleChange = (e) => {\r\n    setState(e.target.value);\r\n  };\r\n  const reset = () => {\r\n    setState('');\r\n  };\r\n  return [state, handleChange, reset];\r\n}\r\n\r\nexport default useInputState;\r\n","import { v4 as uuidv4 } from 'uuid';\r\n\r\nexport default (state, action) => {\r\n  switch (action.type) {\r\n    case 'ADD':\r\n      return [...state, { id: uuidv4(), task: action.task, complete: false }];\r\n    case 'REMOVE':\r\n      return state.filter((todo) => todo.id !== action.id);\r\n    case 'TOGGLE':\r\n      return state.map((todo) =>\r\n        todo.id === action.id ? { ...todo, complete: !todo.complete } : todo\r\n      );\r\n    case 'EDIT':\r\n      return state.map((todo) =>\r\n        todo.id === action.id ? { ...todo, task: action.task } : todo\r\n      );\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { createContext } from 'react';\r\nimport todoReducer from '../reducers';\r\nimport { useLocalStorageReducer } from '../Hooks/useLocalStorageReducer';\r\n\r\nconst defaultTodos = [\r\n  { id: 1, task: 'Mow the lawn', complete: false },\r\n  { id: 2, task: 'Mow the lawn', complete: false },\r\n];\r\n\r\nexport const TodosContext = createContext();\r\nexport const DispatchContext = createContext();\r\n\r\nexport const TodosProvider = (props) => {\r\n  // const todosStuff = useTodos(defaultTodos);\r\n  const [todos, dispatch] = useLocalStorageReducer(\r\n    'todos',\r\n    defaultTodos,\r\n    todoReducer\r\n  );\r\n  return (\r\n    <TodosContext.Provider value={todos}>\r\n      <DispatchContext.Provider value={dispatch}>\r\n        {props.children}\r\n      </DispatchContext.Provider>\r\n    </TodosContext.Provider>\r\n  );\r\n};\r\n","import { useReducer, useEffect } from 'react';\r\nfunction useLocalStorageReducer(key, defaultVal, reducer) {\r\n  const [state, dispatch] = useReducer(reducer, defaultVal, () => {\r\n    let val;\r\n    try {\r\n      val = JSON.parse(window.localStorage.getItem(key) || String(defaultVal));\r\n    } catch (e) {\r\n      val = defaultVal;\r\n    }\r\n    return val;\r\n  });\r\n  useEffect(() => {\r\n    window.localStorage.setItem(key, JSON.stringify(state));\r\n  }, [state, key]);\r\n  return [state, dispatch];\r\n}\r\n\r\nexport { useLocalStorageReducer };\r\n","import React, { useContext } from 'react';\r\nimport useInputState from './Hooks/useInputState';\r\nimport { DispatchContext } from './contexts/todos.context';\r\nimport { TextField } from '@material-ui/core';\r\n\r\nfunction EditTodoForm({ id, task, toggleEditForm }) {\r\n  const [value, handleChange, reset] = useInputState(task);\r\n  const dispatch = useContext(DispatchContext);\r\n  return (\r\n    <form\r\n      onSubmit={(e) => {\r\n        e.preventDefault();\r\n        dispatch({ type: 'EDIT', id, task: value });\r\n        reset();\r\n        toggleEditForm();\r\n      }}\r\n      style={{\r\n        marginLeft: '1rem',\r\n        width: '50%',\r\n      }}\r\n    >\r\n      <TextField\r\n        value={value}\r\n        onChange={handleChange}\r\n        margin=\"normal\"\r\n        fullWidth\r\n        autoFocus\r\n      />\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default EditTodoForm;\r\n","import React, { useContext, memo } from 'react';\r\nimport useToggleState from './Hooks/useToggle';\r\nimport EditTodoForm from './EditTodoForm';\r\nimport { DispatchContext } from './contexts/todos.context';\r\nimport {\r\n  ListItem,\r\n  ListItemText,\r\n  Checkbox,\r\n  IconButton,\r\n  ListItemSecondaryAction,\r\n} from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\n\r\nfunction Todo({ task, id, complete }) {\r\n  const [isEditing, toggle] = useToggleState(false);\r\n  const dispatch = useContext(DispatchContext);\r\n  console.log('To-do re-render', task);\r\n  return (\r\n    <ListItem style={{ height: '64px' }}>\r\n      {isEditing ? (\r\n        <EditTodoForm id={id} task={task} toggleEditForm={toggle} />\r\n      ) : (\r\n        <>\r\n          <Checkbox\r\n            tabIndex={-1}\r\n            checked={complete}\r\n            onClick={() => dispatch({ type: 'TOGGLE', id })}\r\n          />\r\n          <ListItemText\r\n            style={{ textDecoration: complete ? 'line-through' : 'none' }}\r\n          >\r\n            {task}\r\n          </ListItemText>\r\n          <ListItemSecondaryAction>\r\n            <IconButton\r\n              aria-label=\"Delete\"\r\n              onClick={() => dispatch({ type: 'REMOVE', id })}\r\n            >\r\n              <DeleteIcon />\r\n            </IconButton>\r\n            <IconButton aria-label=\"Edit\" onClick={() => toggle(id)}>\r\n              <EditIcon />\r\n            </IconButton>\r\n          </ListItemSecondaryAction>\r\n        </>\r\n      )}\r\n    </ListItem>\r\n  );\r\n}\r\n\r\nexport default memo(Todo);\r\n","import { useState } from 'react';\r\n\r\nexport default (initialVal = false) => {\r\n  const [state, setState] = useState(initialVal);\r\n\r\n  const toggle = () => setState(!state);\r\n\r\n  return [state, toggle];\r\n};\r\n","import React, { useContext } from 'react';\r\nimport { Paper, List, Divider } from '@material-ui/core';\r\nimport Todo from './Todo';\r\nimport { TodosContext } from './contexts/todos.context';\r\n\r\nfunction TodoList(props) {\r\n  const todos = useContext(TodosContext);\r\n  if (todos.length)\r\n    return (\r\n      <Paper>\r\n        <List>\r\n          {todos.map((todo, i) => (\r\n            <React.Fragment key={todo.id}>\r\n              <Todo {...todo} key={todo.id} complete={todo.complete} />\r\n              {i < todos.length - 1 && <Divider />}\r\n            </React.Fragment>\r\n          ))}\r\n        </List>\r\n      </Paper>\r\n    );\r\n  return null;\r\n}\r\n\r\nexport default TodoList;\r\n","import React, { useContext } from 'react';\r\nimport { Paper, TextField } from '@material-ui/core';\r\nimport useInputState from './Hooks/useInputState';\r\nimport { DispatchContext } from './contexts/todos.context';\r\nfunction TodoForm(props) {\r\n  const [value, handleChange, reset] = useInputState('');\r\n  const dispatch = useContext(DispatchContext);\r\n  return (\r\n    <Paper style={{ margin: '1rem 0', padding: '0 1rem' }}>\r\n      <form\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          dispatch({ type: 'ADD', task: value });\r\n          reset();\r\n        }}\r\n      >\r\n        <TextField\r\n          value={value}\r\n          onChange={handleChange}\r\n          margin=\"normal\"\r\n          label=\"Add to do\"\r\n          fullWidth\r\n        />\r\n      </form>\r\n    </Paper>\r\n  );\r\n}\r\n\r\nexport default TodoForm;\r\n","import React from 'react';\r\nimport { Paper, AppBar, Toolbar, Typography, Grid } from '@material-ui/core';\r\nimport TodoList from './TodoList';\r\nimport TodoForm from './TodoForm';\r\nimport { TodosProvider } from './contexts/todos.context';\r\nimport 'fontsource-roboto';\r\n\r\nfunction TodoApp(props) {\r\n  // const initialTodos = [{ id: 1, task: 'Pet a monkey', complete: false }];\r\n\r\n  return (\r\n    <Paper\r\n      style={{\r\n        height: '100vh',\r\n        margin: '0',\r\n        padding: '0',\r\n        backgroundColor: 'white',\r\n      }}\r\n      elevation={0}\r\n    >\r\n      <AppBar color=\"primary\" position=\"static\" style={{ height: '64px' }}>\r\n        <Toolbar>\r\n          <Typography color=\"inherit\">REACT HOOKS TODO</Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Grid container justify=\"center\" style={{ marginTop: '1rem' }}>\r\n        <Grid item xs={11} md={8} lg={4}>\r\n          <TodosProvider>\r\n            <TodoForm />\r\n            <TodoList />\r\n          </TodosProvider>\r\n        </Grid>\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n}\r\n\r\nexport default TodoApp;\r\n","import React from 'react';\nimport TodoApp from './TodoApp.js';\nimport './App.css';\n\nfunction App() {\n  return <TodoApp />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}